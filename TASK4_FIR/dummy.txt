Task 4 â€“ Digital FIR Filter Design
Objective: Design and simulate a digital FIR (Finite Impulse Response) filter using Verilog.
Example: A 3-tap FIR filter with coefficients [1, 2, 1].

FIR Filter Verilog Code (fir_filter.v)
// Parameterized FIR filter module (3 taps example)
module fir_filter #(
    parameter DATA_WIDTH = 8,
    parameter COEF_WIDTH = 8,
    parameter TAP_NUM    = 3
)
(
    input  clk,
    input  reset,
    input  signed [DATA_WIDTH-1:0] x,  // Input sample
    output reg signed [DATA_WIDTH+COEF_WIDTH-1:0] y // Filter output
);

// Shift register to store previous input samples
reg signed [DATA_WIDTH-1:0] shift_reg [0:TAP_NUM-1];
wire signed [DATA_WIDTH+COEF_WIDTH-1:0] mult [0:TAP_NUM-1];
reg signed [DATA_WIDTH+COEF_WIDTH-1:0] acc;
integer i;

// Define filter coefficients (example: [1, 2, 1])
localparam signed [COEF_WIDTH-1:0] coef0 = 1;
localparam signed [COEF_WIDTH-1:0] coef1 = 2;
localparam signed [COEF_WIDTH-1:0] coef2 = 1;

// Multiply each tap output with its corresponding coefficient
assign mult[0] = shift_reg[0] * coef0;
assign mult[1] = shift_reg[1] * coef1;
assign mult[2] = shift_reg[2] * coef2;

always @(posedge clk or posedge reset) begin
    if (reset) begin
         for (i = 0; i < TAP_NUM; i = i + 1)
             shift_reg[i] <= 0;
         y <= 0;
    end else begin
         // Update shift register
         shift_reg[2] <= shift_reg[1];
         shift_reg[1] <= shift_reg[0];
         shift_reg[0] <= x;
         // Accumulate the products
         acc = 0;
         for (i = 0; i < TAP_NUM; i = i + 1)
             acc = acc + mult[i];
         y <= acc;
    end
end

endmodule
FIR Filter Testbench (fir_filter_tb.v)
module fir_filter_tb;
  reg clk;
  reg reset;
  reg signed [7:0] x;
  wire signed [15:0] y; // Output width (DATA_WIDTH+COEF_WIDTH)

  // Instantiate the FIR filter module
  fir_filter uut (
      .clk(clk),
      .reset(reset),
      .x(x),
      .y(y)
  );

  // Clock generation: period = 10 time units
  initial begin
      clk = 0;
      forever #5 clk = ~clk;
  end

  // Stimulus for FIR filter
  initial begin
      reset = 1;
      x = 0;
      #10;
      reset = 0;
      // Apply an input sequence
      x = 8'd1;  #10;
      x = 8'd2;  #10;
      x = 8'd3;  #10;
      x = 8'd4;  #10;
      x = 8'd5;  #10;
      $finish;
  end

  initial begin
      $monitor("Time %t: x = %d, y = %d", $time, x, y);
  end

endmodule
